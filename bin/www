#!/usr/bin/env node

"use strict";

const http = require("http");
const path = require("path");
const App = require("../api/app");

const root = path.join.bind(path, path.resolve(__dirname), "..");
process.chdir(root());

let app = new App();
let mainServer = http.createServer(app.express);
let subscriptionsServer = http.createServer((request, response) => {
  response.writeHead(404);
  response.end();
});

app
  .init({ mainServer, subscriptionsServer })
  .then(() => {
    mainServer.listen(app.config.appPort, app.config.appHost);
    mainServer.on("error", onError);
    mainServer.once("listening", onMainListening);

    subscriptionsServer.listen(
      app.config.appSubscriptionsPort,
      app.config.appHost
    );
    subscriptionsServer.on("error", onError);
    subscriptionsServer.once("listening", onSubscriptionsListening);
  })
  .catch(error => {
    console.error(error);
    process.exit(1);
  });

/**
 * Event listener for HTTP server "error" event.
 * @param {Error} error
 */
function onError(error) {
  if (error.syscall !== "listen") throw error;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`Port ${app.config.appPort} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`Port ${app.config.appPort} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onMainListening() {
  let address = mainServer.address();
  console.log(`> Server is listening on ${address.address}:${address.port}`);
  console.log(`> Serving ${app.config.appOrigins.join(", ")}`);
}

function onSubscriptionsListening() {
  let address = subscriptionsServer.address();
  console.log(
    `> Subscriptions server is listening on ${address.address}:${address.port}`
  );
}
